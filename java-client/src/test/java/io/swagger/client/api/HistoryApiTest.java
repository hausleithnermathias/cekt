/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.EventHistoryEntry;
import io.swagger.client.model.PrintJobHistory;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoryApi
 */
@Ignore
public class HistoryApiTest {

    private final HistoryApi api = new HistoryApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void historyEventsGetTest() throws ApiException {
        BigDecimal offset = null;
        BigDecimal count = null;
        BigDecimal typeId = null;
        List<EventHistoryEntry> response = api.historyEventsGet(offset, count, typeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void historyEventsPostTest() throws ApiException {
        BigDecimal typeId = null;
        List<String> parameters = null;
        api.historyEventsPost(typeId, parameters);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void historyPrintJobsGetTest() throws ApiException {
        BigDecimal offset = null;
        BigDecimal count = null;
        List<PrintJobHistory> response = api.historyPrintJobsGet(offset, count);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void historyPrintJobsUuidGetTest() throws ApiException {
        String uuid = null;
        PrintJobHistory response = api.historyPrintJobsUuidGet(uuid);

        // TODO: test validations
    }
    
}
