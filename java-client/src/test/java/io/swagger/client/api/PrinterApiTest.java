/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Bed;
import java.math.BigDecimal;
import io.swagger.client.model.Blink;
import io.swagger.client.model.CurrentTargetNumberPair;
import io.swagger.client.model.Extruder;
import io.swagger.client.model.Feeder;
import java.io.File;
import io.swagger.client.model.Head;
import io.swagger.client.model.HeaderValidationEntry;
import io.swagger.client.model.Hotend;
import io.swagger.client.model.HotendOffset;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.Led;
import io.swagger.client.model.Material;
import io.swagger.client.model.Printer;
import io.swagger.client.model.XYZ;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrinterApi
 */
@Ignore
public class PrinterApiTest {

    private final PrinterApi api = new PrinterApi();

    
    /**
     * 
     *
     * Returns bed object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerBedGetTest() throws ApiException {
        Bed response = api.printerBedGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns status of pre-heating the heated bed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerBedPreHeatGetTest() throws ApiException {
        InlineResponse2003 response = api.printerBedPreHeatGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerBedPreHeatPutTest() throws ApiException {
        BigDecimal temperature = null;
        BigDecimal timeout = null;
        api.printerBedPreHeatPut(temperature, timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns temperature of bed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerBedTemperatureGetTest() throws ApiException {
        CurrentTargetNumberPair response = api.printerBedTemperatureGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerBedTemperaturePutTest() throws ApiException {
        BigDecimal temperature = null;
        api.printerBedTemperaturePut(temperature);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the type of the bed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerBedTypeGetTest() throws ApiException {
        String response = api.printerBedTypeGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calculates noise variances on the cap sensor by executing taking 100 values, each  loop measuring 50 samples
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerDiagnosticsCapSensorNoiseGetTest() throws ApiException {
        api.printerDiagnosticsCapSensorNoiseGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring 50 samples
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerDiagnosticsCapSensorNoiseLoopCountGetTest() throws ApiException {
        Integer loopCount = null;
        api.printerDiagnosticsCapSensorNoiseLoopCountGet(loopCount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring sample_count samples
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerDiagnosticsCapSensorNoiseLoopCountSampleCountGetTest() throws ApiException {
        Integer loopCount = null;
        Integer sampleCount = null;
        api.printerDiagnosticsCapSensorNoiseLoopCountSampleCountGet(loopCount, sampleCount);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets historical temperature&amp;flow data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerDiagnosticsTemperatureFlowSampleCountGetTest() throws ApiException {
        Integer sampleCount = null;
        Integer csv = null;
        api.printerDiagnosticsTemperatureFlowSampleCountGet(sampleCount, csv);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns printer object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerGetTest() throws ApiException {
        Printer response = api.printerGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all heads of the printer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsGetTest() throws ApiException {
        List<Head> response = api.printerHeadsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the default acceleration of head by ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdAccelerationGetTest() throws ApiException {
        Long headId = null;
        BigDecimal response = api.printerHeadsHeadIdAccelerationGet(headId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdAccelerationPutTest() throws ApiException {
        Long headId = null;
        BigDecimal acceleration = null;
        api.printerHeadsHeadIdAccelerationPut(headId, acceleration);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the GUID of the active material
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        String response = api.printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the active material of the extruder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        Material response = api.printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the GUID of the active material
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        String response = api.printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * length of material remaining on spool in mm. Or -1 if no value is known.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        BigDecimal response = api.printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns acceleration of feeder.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        BigDecimal response = api.printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPutTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        BigDecimal acceleration = null;
        api.printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPut(headId, extruderId, acceleration);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns feeder of selected extruder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdFeederGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        Feeder response = api.printerHeadsHeadIdExtrudersExtruderIdFeederGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns jerk of feeder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdFeederJerkGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        BigDecimal response = api.printerHeadsHeadIdExtrudersExtruderIdFeederJerkGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdFeederJerkPutTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        BigDecimal jerk = null;
        api.printerHeadsHeadIdExtrudersExtruderIdFeederJerkPut(headId, extruderId, jerk);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns max_speed of feeder.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        BigDecimal response = api.printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPutTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        BigDecimal maxSpeed = null;
        api.printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPut(headId, extruderId, maxSpeed);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns extruder by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        Extruder response = api.printerHeadsHeadIdExtrudersExtruderIdGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns hotend of extruder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdHotendGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        Hotend response = api.printerHeadsHeadIdExtrudersExtruderIdHotendGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns offset of hotend with respect to head
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        HotendOffset response = api.printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns temperature of extruder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGetTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        CurrentTargetNumberPair response = api.printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGet(headId, extruderId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePutTest() throws ApiException {
        Long headId = null;
        Long extruderId = null;
        BigDecimal temperature = null;
        api.printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePut(headId, extruderId, temperature);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all extruders of a head
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdExtrudersGetTest() throws ApiException {
        Long headId = null;
        List<Extruder> response = api.printerHeadsHeadIdExtrudersGet(headId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns head by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdGetTest() throws ApiException {
        Long headId = null;
        Head response = api.printerHeadsHeadIdGet(headId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns jerk of head by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdJerkGetTest() throws ApiException {
        Long headId = null;
        XYZ response = api.printerHeadsHeadIdJerkGet(headId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdJerkPutTest() throws ApiException {
        Long headId = null;
        XYZ jerk = null;
        api.printerHeadsHeadIdJerkPut(headId, jerk);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns max speed of head by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdMaxSpeedGetTest() throws ApiException {
        Long headId = null;
        XYZ response = api.printerHeadsHeadIdMaxSpeedGet(headId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdMaxSpeedPutTest() throws ApiException {
        Long headId = null;
        XYZ speed = null;
        api.printerHeadsHeadIdMaxSpeedPut(headId, speed);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns position of head by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdPositionGetTest() throws ApiException {
        Long headId = null;
        XYZ response = api.printerHeadsHeadIdPositionGet(headId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerHeadsHeadIdPositionPutTest() throws ApiException {
        Long headId = null;
        XYZ position = null;
        api.printerHeadsHeadIdPositionPut(headId, position);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerLedBlinkPostTest() throws ApiException {
        Blink blink = null;
        api.printerLedBlinkPost(blink);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns hue, saturation, and value (HSV) of the case lighting
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerLedGetTest() throws ApiException {
        Led response = api.printerLedGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerLedPutTest() throws ApiException {
        Led color = null;
        api.printerLedPut(color);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the status of the printer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerStatusGetTest() throws ApiException {
        String response = api.printerStatusGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printerValidateHeaderPostTest() throws ApiException {
        File file = null;
        List<HeaderValidationEntry> response = api.printerValidateHeaderPost(file);

        // TODO: test validations
    }
    
}
