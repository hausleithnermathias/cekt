/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Ignore
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    
    /**
     * 
     *
     * Check if the given ID is authorized for printer access. Will return &#39;authorized&#39; when the end user has selected that this application is allowed to use the printer. Will return &#39;unauthorized&#39; when the user has selected that the application is not allowed to access the printer. Will return &#39;unknown&#39; when the end user has not selected any option yet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authCheckIdGetTest() throws ApiException {
        String id = null;
        InlineResponse2001 response = api.authCheckIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Request authentication from the printer. This generates new id/key combination that has to be used as username/password in the digest authentication on certain APIs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authRequestPostTest() throws ApiException {
        String application = null;
        String user = null;
        String hostName = null;
        String exclusionKey = null;
        InlineResponse200 response = api.authRequestPost(application, user, hostName, exclusionKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This API call always does authentication checking for digest authentication. Invalid digest id/key combinations will generate a 401 result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authVerifyGetTest() throws ApiException {
        InlineResponse2002 response = api.authVerifyGet();

        // TODO: test validations
    }
    
}
