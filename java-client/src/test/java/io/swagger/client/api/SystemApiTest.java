/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.MessageData;
import io.swagger.client.model.System;
import io.swagger.client.model.SystemLog;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SystemApi
 */
@Ignore
public class SystemApiTest {

    private final SystemApi api = new SystemApi();

    
    /**
     * 
     *
     * Makes the printer beep
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beepPutTest() throws ApiException {
        BigDecimal frequency = null;
        BigDecimal duration = null;
        api.beepPut(frequency, duration);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the country of the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemCountryGetTest() throws ApiException {
        String response = api.systemCountryGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemCountryPutTest() throws ApiException {
        String country = null;
        api.systemCountryPut(country);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Enable external services to display a message screen on the printer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemDisplayMessagePutTest() throws ApiException {
        MessageData messageData = null;
        api.systemDisplayMessagePut(messageData);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the entire system object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGetTest() throws ApiException {
        System response = api.systemGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Every machine as a unique identifier stored inside the board. This allows for unique identification of this machine. This identifier is a UUID4.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemGuidGetTest() throws ApiException {
        String response = api.systemGuidGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The same machine could have different hardware revisions. When hardware is updated and software needs to know that hardware has changed, this revision number is changed. Currently only revision 0 is known.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemHardwareRevisionGetTest() throws ApiException {
        Integer response = api.systemHardwareRevisionGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the machine type as number identifier. This identifier IDs a specific form of hardware
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemHardwareTypeidGetTest() throws ApiException {
        Integer response = api.systemHardwareTypeidGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the language of the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemLanguageGetTest() throws ApiException {
        String response = api.systemLanguageGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the logs of the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemLogGetTest() throws ApiException {
        BigDecimal boot = null;
        BigDecimal lines = null;
        SystemLog response = api.systemLogGet(boot, lines);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the name of the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemNameGetTest() throws ApiException {
        String response = api.systemNameGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemNamePutTest() throws ApiException {
        String name = null;
        api.systemNamePut(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the type of machine that we are talking with. Always returns \&quot;3D printer\&quot;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemTypeGetTest() throws ApiException {
        String response = api.systemTypeGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the uptime of the system in seconds
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemUptimeGetTest() throws ApiException {
        Integer response = api.systemUptimeGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the machines variant. Currently this can return \&quot;Ultimaker 3\&quot; or \&quot;Ultimaker 3 extended\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemVariantGetTest() throws ApiException {
        String response = api.systemVariantGet();

        // TODO: test validations
    }
    
}
