/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import java.io.File;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.PrintJob;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrintJobApi
 */
@Ignore
public class PrintJobApiTest {

    private final PrintJobApi api = new PrintJobApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobGcodeGetTest() throws ApiException {
        File response = api.printJobGcodeGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobGetTest() throws ApiException {
        PrintJob response = api.printJobGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobNameGetTest() throws ApiException {
        String response = api.printJobNameGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobPostTest() throws ApiException {
        String jobname = null;
        File file = null;
        InlineResponse201 response = api.printJobPost(jobname, file);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the (estimated) progress for the current print job, a value between 0 and 1
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobProgressGetTest() throws ApiException {
        BigDecimal response = api.printJobProgressGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobReprintOriginalUuidGetTest() throws ApiException {
        String response = api.printJobReprintOriginalUuidGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * If the origin equals to WEB_API, then this will return the application that sent the job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobSourceApplicationGetTest() throws ApiException {
        String response = api.printJobSourceApplicationGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * From what source was the print job started. USB means it&#39;s started manually from the USB drive. WEB_API means it&#39;s being received by the WEB API. CALIBRATION_MENU means it&#39;s printing the XY offset print
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobSourceGetTest() throws ApiException {
        String response = api.printJobSourceGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * If the origin equals to WEB_API, then this will return the user who initiated the job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobSourceUserGetTest() throws ApiException {
        String response = api.printJobSourceUserGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the print job state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobStateGetTest() throws ApiException {
        String response = api.printJobStateGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobStatePutTest() throws ApiException {
        String target = null;
        api.printJobStatePut(target);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the time elapsed (in seconds) since starting this print, including pauses etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobTimeElapsedGetTest() throws ApiException {
        Integer response = api.printJobTimeElapsedGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the (estimated) total time in seconds for this print, excluding pauses etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobTimeTotalGetTest() throws ApiException {
        Integer response = api.printJobTimeTotalGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJobUuidGetTest() throws ApiException {
        String response = api.printJobUuidGet();

        // TODO: test validations
    }
    
}
