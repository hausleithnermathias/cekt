/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CurrentTargetNumberPair;
import io.swagger.client.model.HotendOffset;
import io.swagger.client.model.HotendStatistics;
import java.io.IOException;

/**
 * A single hotend
 */
@ApiModel(description = "A single hotend")
public class Hotend {
  @SerializedName("id")
  private String id = null;

  @SerializedName("serial")
  private String serial = null;

  @SerializedName("temperature")
  private CurrentTargetNumberPair temperature = null;

  @SerializedName("offset")
  private HotendOffset offset = null;

  @SerializedName("statistics")
  private HotendStatistics statistics = null;

  public Hotend id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Hotend serial(String serial) {
    this.serial = serial;
    return this;
  }

   /**
   * A hexadecimal representation of the serial number
   * @return serial
  **/
  @ApiModelProperty(value = "A hexadecimal representation of the serial number")
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }

  public Hotend temperature(CurrentTargetNumberPair temperature) {
    this.temperature = temperature;
    return this;
  }

   /**
   * Get temperature
   * @return temperature
  **/
  @ApiModelProperty(value = "")
  public CurrentTargetNumberPair getTemperature() {
    return temperature;
  }

  public void setTemperature(CurrentTargetNumberPair temperature) {
    this.temperature = temperature;
  }

  public Hotend offset(HotendOffset offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @ApiModelProperty(value = "")
  public HotendOffset getOffset() {
    return offset;
  }

  public void setOffset(HotendOffset offset) {
    this.offset = offset;
  }

  public Hotend statistics(HotendStatistics statistics) {
    this.statistics = statistics;
    return this;
  }

   /**
   * Get statistics
   * @return statistics
  **/
  @ApiModelProperty(value = "")
  public HotendStatistics getStatistics() {
    return statistics;
  }

  public void setStatistics(HotendStatistics statistics) {
    this.statistics = statistics;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hotend hotend = (Hotend) o;
    return Objects.equals(this.id, hotend.id) &&
        Objects.equals(this.serial, hotend.serial) &&
        Objects.equals(this.temperature, hotend.temperature) &&
        Objects.equals(this.offset, hotend.offset) &&
        Objects.equals(this.statistics, hotend.statistics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, serial, temperature, offset, statistics);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hotend {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

