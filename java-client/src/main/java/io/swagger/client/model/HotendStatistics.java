/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Keeping track of both changing statistics of the PrintCore.
 */
@ApiModel(description = "Keeping track of both changing statistics of the PrintCore.")
public class HotendStatistics {
  @SerializedName("last_material_guid")
  private String lastMaterialGuid = null;

  @SerializedName("material_extruded")
  private Integer materialExtruded = null;

  @SerializedName("max_temperature_exposed")
  private Integer maxTemperatureExposed = null;

  @SerializedName("time_spent_hot")
  private Integer timeSpentHot = null;

  public HotendStatistics lastMaterialGuid(String lastMaterialGuid) {
    this.lastMaterialGuid = lastMaterialGuid;
    return this;
  }

   /**
   * Get lastMaterialGuid
   * @return lastMaterialGuid
  **/
  @ApiModelProperty(value = "")
  public String getLastMaterialGuid() {
    return lastMaterialGuid;
  }

  public void setLastMaterialGuid(String lastMaterialGuid) {
    this.lastMaterialGuid = lastMaterialGuid;
  }

  public HotendStatistics materialExtruded(Integer materialExtruded) {
    this.materialExtruded = materialExtruded;
    return this;
  }

   /**
   * Approximate accumulated amount of material extruded during printing in millimeters.
   * @return materialExtruded
  **/
  @ApiModelProperty(value = "Approximate accumulated amount of material extruded during printing in millimeters.")
  public Integer getMaterialExtruded() {
    return materialExtruded;
  }

  public void setMaterialExtruded(Integer materialExtruded) {
    this.materialExtruded = materialExtruded;
  }

  public HotendStatistics maxTemperatureExposed(Integer maxTemperatureExposed) {
    this.maxTemperatureExposed = maxTemperatureExposed;
    return this;
  }

   /**
   * Maximum temperature exposed in degrees Celsius
   * @return maxTemperatureExposed
  **/
  @ApiModelProperty(value = "Maximum temperature exposed in degrees Celsius")
  public Integer getMaxTemperatureExposed() {
    return maxTemperatureExposed;
  }

  public void setMaxTemperatureExposed(Integer maxTemperatureExposed) {
    this.maxTemperatureExposed = maxTemperatureExposed;
  }

  public HotendStatistics timeSpentHot(Integer timeSpentHot) {
    this.timeSpentHot = timeSpentHot;
    return this;
  }

   /**
   * Approximate time spent above 65 degrees Celsius in seconds.
   * @return timeSpentHot
  **/
  @ApiModelProperty(value = "Approximate time spent above 65 degrees Celsius in seconds.")
  public Integer getTimeSpentHot() {
    return timeSpentHot;
  }

  public void setTimeSpentHot(Integer timeSpentHot) {
    this.timeSpentHot = timeSpentHot;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotendStatistics hotendStatistics = (HotendStatistics) o;
    return Objects.equals(this.lastMaterialGuid, hotendStatistics.lastMaterialGuid) &&
        Objects.equals(this.materialExtruded, hotendStatistics.materialExtruded) &&
        Objects.equals(this.maxTemperatureExposed, hotendStatistics.maxTemperatureExposed) &&
        Objects.equals(this.timeSpentHot, hotendStatistics.timeSpentHot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastMaterialGuid, materialExtruded, maxTemperatureExposed, timeSpentHot);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotendStatistics {\n");
    
    sb.append("    lastMaterialGuid: ").append(toIndentedString(lastMaterialGuid)).append("\n");
    sb.append("    materialExtruded: ").append(toIndentedString(materialExtruded)).append("\n");
    sb.append("    maxTemperatureExposed: ").append(toIndentedString(maxTemperatureExposed)).append("\n");
    sb.append("    timeSpentHot: ").append(toIndentedString(timeSpentHot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

