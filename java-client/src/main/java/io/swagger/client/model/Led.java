/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * A single (or set) of light source(s)
 */
@ApiModel(description = "A single (or set) of light source(s)")
public class Led {
  @SerializedName("hue")
  private BigDecimal hue = null;

  @SerializedName("saturation")
  private BigDecimal saturation = null;

  @SerializedName("value")
  private BigDecimal value = null;

  public Led hue(BigDecimal hue) {
    this.hue = hue;
    return this;
  }

   /**
   * Get hue
   * @return hue
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getHue() {
    return hue;
  }

  public void setHue(BigDecimal hue) {
    this.hue = hue;
  }

  public Led saturation(BigDecimal saturation) {
    this.saturation = saturation;
    return this;
  }

   /**
   * Get saturation
   * @return saturation
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getSaturation() {
    return saturation;
  }

  public void setSaturation(BigDecimal saturation) {
    this.saturation = saturation;
  }

  public Led value(BigDecimal value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Led led = (Led) o;
    return Objects.equals(this.hue, led.hue) &&
        Objects.equals(this.saturation, led.saturation) &&
        Objects.equals(this.value, led.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hue, saturation, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Led {\n");
    
    sb.append("    hue: ").append(toIndentedString(hue)).append("\n");
    sb.append("    saturation: ").append(toIndentedString(saturation)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

