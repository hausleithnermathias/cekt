/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Bed;
import io.swagger.client.model.Camera;
import io.swagger.client.model.Head;
import io.swagger.client.model.Led;
import io.swagger.client.model.Network;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Printer
 */
public class Printer {
  @SerializedName("heads")
  private List<Head> heads = new ArrayList<Head>();

  @SerializedName("camera")
  private Camera camera = null;

  @SerializedName("bed")
  private Bed bed = null;

  @SerializedName("network")
  private Network network = null;

  @SerializedName("led")
  private Led led = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    BOOTING("booting"),
    
    IDLE("idle"),
    
    PRINTING("printing"),
    
    ERROR("error"),
    
    MAINTENANCE("maintenance");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public Printer heads(List<Head> heads) {
    this.heads = heads;
    return this;
  }

  public Printer addHeadsItem(Head headsItem) {
    this.heads.add(headsItem);
    return this;
  }

   /**
   * Get heads
   * @return heads
  **/
  @ApiModelProperty(required = true, value = "")
  public List<Head> getHeads() {
    return heads;
  }

  public void setHeads(List<Head> heads) {
    this.heads = heads;
  }

  public Printer camera(Camera camera) {
    this.camera = camera;
    return this;
  }

   /**
   * Get camera
   * @return camera
  **/
  @ApiModelProperty(value = "")
  public Camera getCamera() {
    return camera;
  }

  public void setCamera(Camera camera) {
    this.camera = camera;
  }

  public Printer bed(Bed bed) {
    this.bed = bed;
    return this;
  }

   /**
   * Get bed
   * @return bed
  **/
  @ApiModelProperty(value = "")
  public Bed getBed() {
    return bed;
  }

  public void setBed(Bed bed) {
    this.bed = bed;
  }

  public Printer network(Network network) {
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @ApiModelProperty(value = "")
  public Network getNetwork() {
    return network;
  }

  public void setNetwork(Network network) {
    this.network = network;
  }

  public Printer led(Led led) {
    this.led = led;
    return this;
  }

   /**
   * Get led
   * @return led
  **/
  @ApiModelProperty(value = "")
  public Led getLed() {
    return led;
  }

  public void setLed(Led led) {
    this.led = led;
  }

  public Printer status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Printer printer = (Printer) o;
    return Objects.equals(this.heads, printer.heads) &&
        Objects.equals(this.camera, printer.camera) &&
        Objects.equals(this.bed, printer.bed) &&
        Objects.equals(this.network, printer.network) &&
        Objects.equals(this.led, printer.led) &&
        Objects.equals(this.status, printer.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(heads, camera, bed, network, led, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Printer {\n");
    
    sb.append("    heads: ").append(toIndentedString(heads)).append("\n");
    sb.append("    camera: ").append(toIndentedString(camera)).append("\n");
    sb.append("    bed: ").append(toIndentedString(bed)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    led: ").append(toIndentedString(led)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

