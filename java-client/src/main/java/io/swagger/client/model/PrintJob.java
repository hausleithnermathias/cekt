/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * An active print job.
 */
@ApiModel(description = "An active print job.")
public class PrintJob {
  @SerializedName("time_elapsed")
  private Integer timeElapsed = null;

  @SerializedName("time_total")
  private Integer timeTotal = null;

  @SerializedName("datetime_started")
  private OffsetDateTime datetimeStarted = null;

  @SerializedName("datetime_finished")
  private OffsetDateTime datetimeFinished = null;

  @SerializedName("datetime_cleaned")
  private OffsetDateTime datetimeCleaned = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("source_user")
  private String sourceUser = null;

  @SerializedName("source_application")
  private String sourceApplication = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("reprint_original_uuid")
  private String reprintOriginalUuid = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    NONE("none"),
    
    PRINTING("printing"),
    
    PAUSING("pausing"),
    
    PAUSED("paused"),
    
    RESUMING("resuming"),
    
    PRE_PRINT("pre_print"),
    
    POST_PRINT("post_print"),
    
    WAIT_CLEANUP("wait_cleanup");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  public PrintJob timeElapsed(Integer timeElapsed) {
    this.timeElapsed = timeElapsed;
    return this;
  }

   /**
   * Get timeElapsed
   * @return timeElapsed
  **/
  @ApiModelProperty(value = "")
  public Integer getTimeElapsed() {
    return timeElapsed;
  }

  public void setTimeElapsed(Integer timeElapsed) {
    this.timeElapsed = timeElapsed;
  }

  public PrintJob timeTotal(Integer timeTotal) {
    this.timeTotal = timeTotal;
    return this;
  }

   /**
   * Get timeTotal
   * @return timeTotal
  **/
  @ApiModelProperty(value = "")
  public Integer getTimeTotal() {
    return timeTotal;
  }

  public void setTimeTotal(Integer timeTotal) {
    this.timeTotal = timeTotal;
  }

  public PrintJob datetimeStarted(OffsetDateTime datetimeStarted) {
    this.datetimeStarted = datetimeStarted;
    return this;
  }

   /**
   * Get datetimeStarted
   * @return datetimeStarted
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getDatetimeStarted() {
    return datetimeStarted;
  }

  public void setDatetimeStarted(OffsetDateTime datetimeStarted) {
    this.datetimeStarted = datetimeStarted;
  }

  public PrintJob datetimeFinished(OffsetDateTime datetimeFinished) {
    this.datetimeFinished = datetimeFinished;
    return this;
  }

   /**
   * Get datetimeFinished
   * @return datetimeFinished
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getDatetimeFinished() {
    return datetimeFinished;
  }

  public void setDatetimeFinished(OffsetDateTime datetimeFinished) {
    this.datetimeFinished = datetimeFinished;
  }

  public PrintJob datetimeCleaned(OffsetDateTime datetimeCleaned) {
    this.datetimeCleaned = datetimeCleaned;
    return this;
  }

   /**
   * Get datetimeCleaned
   * @return datetimeCleaned
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getDatetimeCleaned() {
    return datetimeCleaned;
  }

  public void setDatetimeCleaned(OffsetDateTime datetimeCleaned) {
    this.datetimeCleaned = datetimeCleaned;
  }

  public PrintJob source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @ApiModelProperty(value = "")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public PrintJob sourceUser(String sourceUser) {
    this.sourceUser = sourceUser;
    return this;
  }

   /**
   * Get sourceUser
   * @return sourceUser
  **/
  @ApiModelProperty(value = "")
  public String getSourceUser() {
    return sourceUser;
  }

  public void setSourceUser(String sourceUser) {
    this.sourceUser = sourceUser;
  }

  public PrintJob sourceApplication(String sourceApplication) {
    this.sourceApplication = sourceApplication;
    return this;
  }

   /**
   * Get sourceApplication
   * @return sourceApplication
  **/
  @ApiModelProperty(value = "")
  public String getSourceApplication() {
    return sourceApplication;
  }

  public void setSourceApplication(String sourceApplication) {
    this.sourceApplication = sourceApplication;
  }

  public PrintJob name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PrintJob uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @ApiModelProperty(value = "")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public PrintJob reprintOriginalUuid(String reprintOriginalUuid) {
    this.reprintOriginalUuid = reprintOriginalUuid;
    return this;
  }

   /**
   * Get reprintOriginalUuid
   * @return reprintOriginalUuid
  **/
  @ApiModelProperty(value = "")
  public String getReprintOriginalUuid() {
    return reprintOriginalUuid;
  }

  public void setReprintOriginalUuid(String reprintOriginalUuid) {
    this.reprintOriginalUuid = reprintOriginalUuid;
  }

  public PrintJob state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @ApiModelProperty(value = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrintJob printJob = (PrintJob) o;
    return Objects.equals(this.timeElapsed, printJob.timeElapsed) &&
        Objects.equals(this.timeTotal, printJob.timeTotal) &&
        Objects.equals(this.datetimeStarted, printJob.datetimeStarted) &&
        Objects.equals(this.datetimeFinished, printJob.datetimeFinished) &&
        Objects.equals(this.datetimeCleaned, printJob.datetimeCleaned) &&
        Objects.equals(this.source, printJob.source) &&
        Objects.equals(this.sourceUser, printJob.sourceUser) &&
        Objects.equals(this.sourceApplication, printJob.sourceApplication) &&
        Objects.equals(this.name, printJob.name) &&
        Objects.equals(this.uuid, printJob.uuid) &&
        Objects.equals(this.reprintOriginalUuid, printJob.reprintOriginalUuid) &&
        Objects.equals(this.state, printJob.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeElapsed, timeTotal, datetimeStarted, datetimeFinished, datetimeCleaned, source, sourceUser, sourceApplication, name, uuid, reprintOriginalUuid, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrintJob {\n");
    
    sb.append("    timeElapsed: ").append(toIndentedString(timeElapsed)).append("\n");
    sb.append("    timeTotal: ").append(toIndentedString(timeTotal)).append("\n");
    sb.append("    datetimeStarted: ").append(toIndentedString(datetimeStarted)).append("\n");
    sb.append("    datetimeFinished: ").append(toIndentedString(datetimeFinished)).append("\n");
    sb.append("    datetimeCleaned: ").append(toIndentedString(datetimeCleaned)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceUser: ").append(toIndentedString(sourceUser)).append("\n");
    sb.append("    sourceApplication: ").append(toIndentedString(sourceApplication)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    reprintOriginalUuid: ").append(toIndentedString(reprintOriginalUuid)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

