/*
 * Ultimaker 3 API
 * REST api for the Ultimaker 3 - 3D printer.  Authentication: Any PUT/POST/DELETE api requires authentication before it can be used. Authentication is done with http digest (RFC 2617) without fallback to basic authentication.  To get a valid username/password combination, the following process can/should be followed.  1) POST /auth/request with 'application' and 'user' as parameters. The application name and user name will be shown to the user on the printer. The reply body will contain a json reply with an 'id' and 'key' part.  2) Repeatedly GET /auth/check/<id> until it reports 'authorized' or 'unauthorized'. This will be reported back once the end user selects if the application is allowed to use the API.  3) [optional] test the authentication, the earlier given 'id' is the username, the 'key' is the password. Use digest authentication on GET /auth/verify to test this.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Bed;
import java.math.BigDecimal;
import io.swagger.client.model.Blink;
import io.swagger.client.model.CurrentTargetNumberPair;
import io.swagger.client.model.Extruder;
import io.swagger.client.model.Feeder;
import java.io.File;
import io.swagger.client.model.Head;
import io.swagger.client.model.HeaderValidationEntry;
import io.swagger.client.model.Hotend;
import io.swagger.client.model.HotendOffset;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.Led;
import io.swagger.client.model.Material;
import io.swagger.client.model.Printer;
import io.swagger.client.model.XYZ;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrinterApi {
    private ApiClient apiClient;

    public PrinterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrinterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for printerBedGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerBedGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/bed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerBedGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerBedGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns bed object
     * @return Bed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Bed printerBedGet() throws ApiException {
        ApiResponse<Bed> resp = printerBedGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns bed object
     * @return ApiResponse&lt;Bed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Bed> printerBedGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = printerBedGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Bed>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns bed object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerBedGetAsync(final ApiCallback<Bed> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerBedGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Bed>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerBedPreHeatGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerBedPreHeatGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/bed/pre_heat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerBedPreHeatGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerBedPreHeatGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns status of pre-heating the heated bed.
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 printerBedPreHeatGet() throws ApiException {
        ApiResponse<InlineResponse2003> resp = printerBedPreHeatGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns status of pre-heating the heated bed.
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> printerBedPreHeatGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = printerBedPreHeatGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns status of pre-heating the heated bed.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerBedPreHeatGetAsync(final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerBedPreHeatGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerBedPreHeatPut
     * @param temperature Target temperature of bed in degrees Celsius (required)
     * @param timeout Timeout for preheating in seconds (optional, default to 300)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerBedPreHeatPutCall(BigDecimal temperature, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/bed/pre_heat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (temperature != null)
        localVarFormParams.put("temperature", temperature);
        if (timeout != null)
        localVarFormParams.put("timeout", timeout);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerBedPreHeatPutValidateBeforeCall(BigDecimal temperature, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'temperature' is set
        if (temperature == null) {
            throw new ApiException("Missing the required parameter 'temperature' when calling printerBedPreHeatPut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerBedPreHeatPutCall(temperature, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param temperature Target temperature of bed in degrees Celsius (required)
     * @param timeout Timeout for preheating in seconds (optional, default to 300)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerBedPreHeatPut(BigDecimal temperature, BigDecimal timeout) throws ApiException {
        printerBedPreHeatPutWithHttpInfo(temperature, timeout);
    }

    /**
     * 
     * 
     * @param temperature Target temperature of bed in degrees Celsius (required)
     * @param timeout Timeout for preheating in seconds (optional, default to 300)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerBedPreHeatPutWithHttpInfo(BigDecimal temperature, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = printerBedPreHeatPutValidateBeforeCall(temperature, timeout, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param temperature Target temperature of bed in degrees Celsius (required)
     * @param timeout Timeout for preheating in seconds (optional, default to 300)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerBedPreHeatPutAsync(BigDecimal temperature, BigDecimal timeout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerBedPreHeatPutValidateBeforeCall(temperature, timeout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerBedTemperatureGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerBedTemperatureGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/bed/temperature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerBedTemperatureGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerBedTemperatureGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns temperature of bed
     * @return CurrentTargetNumberPair
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CurrentTargetNumberPair printerBedTemperatureGet() throws ApiException {
        ApiResponse<CurrentTargetNumberPair> resp = printerBedTemperatureGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns temperature of bed
     * @return ApiResponse&lt;CurrentTargetNumberPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CurrentTargetNumberPair> printerBedTemperatureGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = printerBedTemperatureGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CurrentTargetNumberPair>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns temperature of bed
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerBedTemperatureGetAsync(final ApiCallback<CurrentTargetNumberPair> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerBedTemperatureGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurrentTargetNumberPair>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerBedTemperaturePut
     * @param temperature Target temperature of bed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerBedTemperaturePutCall(BigDecimal temperature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/bed/temperature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (temperature != null)
        localVarFormParams.put("temperature", temperature);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerBedTemperaturePutValidateBeforeCall(BigDecimal temperature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'temperature' is set
        if (temperature == null) {
            throw new ApiException("Missing the required parameter 'temperature' when calling printerBedTemperaturePut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerBedTemperaturePutCall(temperature, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param temperature Target temperature of bed (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerBedTemperaturePut(BigDecimal temperature) throws ApiException {
        printerBedTemperaturePutWithHttpInfo(temperature);
    }

    /**
     * 
     * 
     * @param temperature Target temperature of bed (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerBedTemperaturePutWithHttpInfo(BigDecimal temperature) throws ApiException {
        com.squareup.okhttp.Call call = printerBedTemperaturePutValidateBeforeCall(temperature, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param temperature Target temperature of bed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerBedTemperaturePutAsync(BigDecimal temperature, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerBedTemperaturePutValidateBeforeCall(temperature, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerBedTypeGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerBedTypeGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/bed/type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerBedTypeGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerBedTypeGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the type of the bed.
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String printerBedTypeGet() throws ApiException {
        ApiResponse<String> resp = printerBedTypeGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns the type of the bed.
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> printerBedTypeGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = printerBedTypeGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the type of the bed.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerBedTypeGetAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerBedTypeGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerDiagnosticsCapSensorNoiseGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerDiagnosticsCapSensorNoiseGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/diagnostics/cap_sensor_noise";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerDiagnosticsCapSensorNoiseGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerDiagnosticsCapSensorNoiseGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Calculates noise variances on the cap sensor by executing taking 100 values, each  loop measuring 50 samples
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerDiagnosticsCapSensorNoiseGet() throws ApiException {
        printerDiagnosticsCapSensorNoiseGetWithHttpInfo();
    }

    /**
     * 
     * Calculates noise variances on the cap sensor by executing taking 100 values, each  loop measuring 50 samples
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerDiagnosticsCapSensorNoiseGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = printerDiagnosticsCapSensorNoiseGetValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Calculates noise variances on the cap sensor by executing taking 100 values, each  loop measuring 50 samples
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerDiagnosticsCapSensorNoiseGetAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerDiagnosticsCapSensorNoiseGetValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerDiagnosticsCapSensorNoiseLoopCountGet
     * @param loopCount The number of times to get sample data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerDiagnosticsCapSensorNoiseLoopCountGetCall(Integer loopCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/diagnostics/cap_sensor_noise/{loop_count}"
            .replaceAll("\\{" + "loop_count" + "\\}", apiClient.escapeString(loopCount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerDiagnosticsCapSensorNoiseLoopCountGetValidateBeforeCall(Integer loopCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loopCount' is set
        if (loopCount == null) {
            throw new ApiException("Missing the required parameter 'loopCount' when calling printerDiagnosticsCapSensorNoiseLoopCountGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerDiagnosticsCapSensorNoiseLoopCountGetCall(loopCount, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring 50 samples
     * @param loopCount The number of times to get sample data (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerDiagnosticsCapSensorNoiseLoopCountGet(Integer loopCount) throws ApiException {
        printerDiagnosticsCapSensorNoiseLoopCountGetWithHttpInfo(loopCount);
    }

    /**
     * 
     * Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring 50 samples
     * @param loopCount The number of times to get sample data (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerDiagnosticsCapSensorNoiseLoopCountGetWithHttpInfo(Integer loopCount) throws ApiException {
        com.squareup.okhttp.Call call = printerDiagnosticsCapSensorNoiseLoopCountGetValidateBeforeCall(loopCount, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring 50 samples
     * @param loopCount The number of times to get sample data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerDiagnosticsCapSensorNoiseLoopCountGetAsync(Integer loopCount, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerDiagnosticsCapSensorNoiseLoopCountGetValidateBeforeCall(loopCount, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerDiagnosticsCapSensorNoiseLoopCountSampleCountGet
     * @param loopCount The number of times to get sample data (required)
     * @param sampleCount The number of times to get sample data (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerDiagnosticsCapSensorNoiseLoopCountSampleCountGetCall(Integer loopCount, Integer sampleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/diagnostics/cap_sensor_noise/{loop_count}/{sample_count}"
            .replaceAll("\\{" + "loop_count" + "\\}", apiClient.escapeString(loopCount.toString()))
            .replaceAll("\\{" + "sample_count" + "\\}", apiClient.escapeString(sampleCount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerDiagnosticsCapSensorNoiseLoopCountSampleCountGetValidateBeforeCall(Integer loopCount, Integer sampleCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loopCount' is set
        if (loopCount == null) {
            throw new ApiException("Missing the required parameter 'loopCount' when calling printerDiagnosticsCapSensorNoiseLoopCountSampleCountGet(Async)");
        }
        
        // verify the required parameter 'sampleCount' is set
        if (sampleCount == null) {
            throw new ApiException("Missing the required parameter 'sampleCount' when calling printerDiagnosticsCapSensorNoiseLoopCountSampleCountGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerDiagnosticsCapSensorNoiseLoopCountSampleCountGetCall(loopCount, sampleCount, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring sample_count samples
     * @param loopCount The number of times to get sample data (required)
     * @param sampleCount The number of times to get sample data (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerDiagnosticsCapSensorNoiseLoopCountSampleCountGet(Integer loopCount, Integer sampleCount) throws ApiException {
        printerDiagnosticsCapSensorNoiseLoopCountSampleCountGetWithHttpInfo(loopCount, sampleCount);
    }

    /**
     * 
     * Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring sample_count samples
     * @param loopCount The number of times to get sample data (required)
     * @param sampleCount The number of times to get sample data (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerDiagnosticsCapSensorNoiseLoopCountSampleCountGetWithHttpInfo(Integer loopCount, Integer sampleCount) throws ApiException {
        com.squareup.okhttp.Call call = printerDiagnosticsCapSensorNoiseLoopCountSampleCountGetValidateBeforeCall(loopCount, sampleCount, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Calculates noise variances on the cap sensor by executing the specified loop_count iterations, each iteration measuring sample_count samples
     * @param loopCount The number of times to get sample data (required)
     * @param sampleCount The number of times to get sample data (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerDiagnosticsCapSensorNoiseLoopCountSampleCountGetAsync(Integer loopCount, Integer sampleCount, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerDiagnosticsCapSensorNoiseLoopCountSampleCountGetValidateBeforeCall(loopCount, sampleCount, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerDiagnosticsTemperatureFlowSampleCountGet
     * @param sampleCount The amount of samples to get (required)
     * @param csv If not zero, return the results as comma separated values instead of a normal json response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerDiagnosticsTemperatureFlowSampleCountGetCall(Integer sampleCount, Integer csv, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/diagnostics/temperature_flow/{sample_count}"
            .replaceAll("\\{" + "sample_count" + "\\}", apiClient.escapeString(sampleCount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (csv != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("csv", csv));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerDiagnosticsTemperatureFlowSampleCountGetValidateBeforeCall(Integer sampleCount, Integer csv, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sampleCount' is set
        if (sampleCount == null) {
            throw new ApiException("Missing the required parameter 'sampleCount' when calling printerDiagnosticsTemperatureFlowSampleCountGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerDiagnosticsTemperatureFlowSampleCountGetCall(sampleCount, csv, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Gets historical temperature&amp;flow data
     * @param sampleCount The amount of samples to get (required)
     * @param csv If not zero, return the results as comma separated values instead of a normal json response. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerDiagnosticsTemperatureFlowSampleCountGet(Integer sampleCount, Integer csv) throws ApiException {
        printerDiagnosticsTemperatureFlowSampleCountGetWithHttpInfo(sampleCount, csv);
    }

    /**
     * 
     * Gets historical temperature&amp;flow data
     * @param sampleCount The amount of samples to get (required)
     * @param csv If not zero, return the results as comma separated values instead of a normal json response. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerDiagnosticsTemperatureFlowSampleCountGetWithHttpInfo(Integer sampleCount, Integer csv) throws ApiException {
        com.squareup.okhttp.Call call = printerDiagnosticsTemperatureFlowSampleCountGetValidateBeforeCall(sampleCount, csv, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Gets historical temperature&amp;flow data
     * @param sampleCount The amount of samples to get (required)
     * @param csv If not zero, return the results as comma separated values instead of a normal json response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerDiagnosticsTemperatureFlowSampleCountGetAsync(Integer sampleCount, Integer csv, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerDiagnosticsTemperatureFlowSampleCountGetValidateBeforeCall(sampleCount, csv, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns printer object
     * @return Printer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Printer printerGet() throws ApiException {
        ApiResponse<Printer> resp = printerGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns printer object
     * @return ApiResponse&lt;Printer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Printer> printerGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = printerGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Printer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns printer object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerGetAsync(final ApiCallback<Printer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Printer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerHeadsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns all heads of the printer
     * @return List&lt;Head&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Head> printerHeadsGet() throws ApiException {
        ApiResponse<List<Head>> resp = printerHeadsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns all heads of the printer
     * @return ApiResponse&lt;List&lt;Head&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Head>> printerHeadsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Head>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all heads of the printer
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsGetAsync(final ApiCallback<List<Head>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Head>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdAccelerationGet
     * @param headId ID of head of which to get the default acceleration of. Note that this speed also has a Z component. This API assumes that the head is the only part that moves. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdAccelerationGetCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/acceleration"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdAccelerationGetValidateBeforeCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdAccelerationGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdAccelerationGetCall(headId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the default acceleration of head by ID.
     * @param headId ID of head of which to get the default acceleration of. Note that this speed also has a Z component. This API assumes that the head is the only part that moves. (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BigDecimal printerHeadsHeadIdAccelerationGet(Long headId) throws ApiException {
        ApiResponse<BigDecimal> resp = printerHeadsHeadIdAccelerationGetWithHttpInfo(headId);
        return resp.getData();
    }

    /**
     * 
     * Returns the default acceleration of head by ID.
     * @param headId ID of head of which to get the default acceleration of. Note that this speed also has a Z component. This API assumes that the head is the only part that moves. (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BigDecimal> printerHeadsHeadIdAccelerationGetWithHttpInfo(Long headId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdAccelerationGetValidateBeforeCall(headId, null, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the default acceleration of head by ID.
     * @param headId ID of head of which to get the default acceleration of. Note that this speed also has a Z component. This API assumes that the head is the only part that moves. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdAccelerationGetAsync(Long headId, final ApiCallback<BigDecimal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdAccelerationGetValidateBeforeCall(headId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdAccelerationPut
     * @param headId  (required)
     * @param acceleration Target default acceleration. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdAccelerationPutCall(Long headId, BigDecimal acceleration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = acceleration;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/acceleration"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdAccelerationPutValidateBeforeCall(Long headId, BigDecimal acceleration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdAccelerationPut(Async)");
        }
        
        // verify the required parameter 'acceleration' is set
        if (acceleration == null) {
            throw new ApiException("Missing the required parameter 'acceleration' when calling printerHeadsHeadIdAccelerationPut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdAccelerationPutCall(headId, acceleration, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param headId  (required)
     * @param acceleration Target default acceleration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerHeadsHeadIdAccelerationPut(Long headId, BigDecimal acceleration) throws ApiException {
        printerHeadsHeadIdAccelerationPutWithHttpInfo(headId, acceleration);
    }

    /**
     * 
     * 
     * @param headId  (required)
     * @param acceleration Target default acceleration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerHeadsHeadIdAccelerationPutWithHttpInfo(Long headId, BigDecimal acceleration) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdAccelerationPutValidateBeforeCall(headId, acceleration, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param headId  (required)
     * @param acceleration Target default acceleration. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdAccelerationPutAsync(Long headId, BigDecimal acceleration, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdAccelerationPutValidateBeforeCall(headId, acceleration, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGet
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/active_material/GUID"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the GUID of the active material
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public String printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<String> resp = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns the GUID of the active material
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the GUID of the active material
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGetAsync(Long headId, Long extruderId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGUIDGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGet
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/active_material"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the active material of the extruder
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder (required)
     * @return Material
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Material printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<Material> resp = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Get the active material of the extruder
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder (required)
     * @return ApiResponse&lt;Material&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Material> printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<Material>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the active material of the extruder
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGetAsync(Long headId, Long extruderId, final ApiCallback<Material> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Material>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGet
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/active_material/guid"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the GUID of the active material
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<String> resp = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns the GUID of the active material
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the GUID of the active material
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGetAsync(Long headId, Long extruderId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialGuidGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGet
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/active_material/length_remaining"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * length of material remaining on spool in mm. Or -1 if no value is known.
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BigDecimal printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<BigDecimal> resp = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * length of material remaining on spool in mm. Or -1 if no value is known.
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BigDecimal> printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * length of material remaining on spool in mm. Or -1 if no value is known.
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGetAsync(Long headId, Long extruderId, final ApiCallback<BigDecimal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdActiveMaterialLengthRemainingGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGet
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/acceleration"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns acceleration of feeder.
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BigDecimal printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<BigDecimal> resp = printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns acceleration of feeder.
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BigDecimal> printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns acceleration of feeder.
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGetAsync(Long headId, Long extruderId, final ApiCallback<BigDecimal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPut
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param acceleration Target acceleration speed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPutCall(Long headId, Long extruderId, BigDecimal acceleration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = acceleration;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/acceleration"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPutValidateBeforeCall(Long headId, Long extruderId, BigDecimal acceleration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPut(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPut(Async)");
        }
        
        // verify the required parameter 'acceleration' is set
        if (acceleration == null) {
            throw new ApiException("Missing the required parameter 'acceleration' when calling printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPutCall(headId, extruderId, acceleration, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param acceleration Target acceleration speed (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPut(Long headId, Long extruderId, BigDecimal acceleration) throws ApiException {
        printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPutWithHttpInfo(headId, extruderId, acceleration);
    }

    /**
     * 
     * 
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param acceleration Target acceleration speed (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPutWithHttpInfo(Long headId, Long extruderId, BigDecimal acceleration) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPutValidateBeforeCall(headId, extruderId, acceleration, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param acceleration Target acceleration speed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPutAsync(Long headId, Long extruderId, BigDecimal acceleration, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederAccelerationPutValidateBeforeCall(headId, extruderId, acceleration, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdFeederGet
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/feeder"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns feeder of selected extruder
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @return Feeder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Feeder printerHeadsHeadIdExtrudersExtruderIdFeederGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<Feeder> resp = printerHeadsHeadIdExtrudersExtruderIdFeederGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns feeder of selected extruder
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @return ApiResponse&lt;Feeder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Feeder> printerHeadsHeadIdExtrudersExtruderIdFeederGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<Feeder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns feeder of selected extruder
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederGetAsync(Long headId, Long extruderId, final ApiCallback<Feeder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Feeder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdFeederJerkGet
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederJerkGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/jerk"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederJerkGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederJerkGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederJerkGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederJerkGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns jerk of feeder
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BigDecimal printerHeadsHeadIdExtrudersExtruderIdFeederJerkGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<BigDecimal> resp = printerHeadsHeadIdExtrudersExtruderIdFeederJerkGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns jerk of feeder
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BigDecimal> printerHeadsHeadIdExtrudersExtruderIdFeederJerkGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederJerkGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns jerk of feeder
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederJerkGetAsync(Long headId, Long extruderId, final ApiCallback<BigDecimal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederJerkGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdFeederJerkPut
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param jerk Target jerk (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederJerkPutCall(Long headId, Long extruderId, BigDecimal jerk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jerk;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/jerk"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederJerkPutValidateBeforeCall(Long headId, Long extruderId, BigDecimal jerk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederJerkPut(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederJerkPut(Async)");
        }
        
        // verify the required parameter 'jerk' is set
        if (jerk == null) {
            throw new ApiException("Missing the required parameter 'jerk' when calling printerHeadsHeadIdExtrudersExtruderIdFeederJerkPut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederJerkPutCall(headId, extruderId, jerk, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param jerk Target jerk (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerHeadsHeadIdExtrudersExtruderIdFeederJerkPut(Long headId, Long extruderId, BigDecimal jerk) throws ApiException {
        printerHeadsHeadIdExtrudersExtruderIdFeederJerkPutWithHttpInfo(headId, extruderId, jerk);
    }

    /**
     * 
     * 
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param jerk Target jerk (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerHeadsHeadIdExtrudersExtruderIdFeederJerkPutWithHttpInfo(Long headId, Long extruderId, BigDecimal jerk) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederJerkPutValidateBeforeCall(headId, extruderId, jerk, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param jerk Target jerk (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederJerkPutAsync(Long headId, Long extruderId, BigDecimal jerk, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederJerkPutValidateBeforeCall(headId, extruderId, jerk, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGet
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/max_speed"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns max_speed of feeder.
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @return BigDecimal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BigDecimal printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<BigDecimal> resp = printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns max_speed of feeder.
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @return ApiResponse&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BigDecimal> printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns max_speed of feeder.
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGetAsync(Long headId, Long extruderId, final ApiCallback<BigDecimal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BigDecimal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPut
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param maxSpeed Target max speed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPutCall(Long headId, Long extruderId, BigDecimal maxSpeed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = maxSpeed;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/feeder/max_speed"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPutValidateBeforeCall(Long headId, Long extruderId, BigDecimal maxSpeed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPut(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPut(Async)");
        }
        
        // verify the required parameter 'maxSpeed' is set
        if (maxSpeed == null) {
            throw new ApiException("Missing the required parameter 'maxSpeed' when calling printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPutCall(headId, extruderId, maxSpeed, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param maxSpeed Target max speed (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPut(Long headId, Long extruderId, BigDecimal maxSpeed) throws ApiException {
        printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPutWithHttpInfo(headId, extruderId, maxSpeed);
    }

    /**
     * 
     * 
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param maxSpeed Target max speed (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPutWithHttpInfo(Long headId, Long extruderId, BigDecimal maxSpeed) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPutValidateBeforeCall(headId, extruderId, maxSpeed, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder from which the feeder is fetched (required)
     * @param maxSpeed Target max speed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPutAsync(Long headId, Long extruderId, BigDecimal maxSpeed, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdFeederMaxSpeedPutValidateBeforeCall(headId, extruderId, maxSpeed, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdGet
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder to fetch. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns extruder by ID
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder to fetch. (required)
     * @return Extruder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Extruder printerHeadsHeadIdExtrudersExtruderIdGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<Extruder> resp = printerHeadsHeadIdExtrudersExtruderIdGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns extruder by ID
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder to fetch. (required)
     * @return ApiResponse&lt;Extruder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Extruder> printerHeadsHeadIdExtrudersExtruderIdGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<Extruder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns extruder by ID
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder to fetch. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdGetAsync(Long headId, Long extruderId, final ApiCallback<Extruder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Extruder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdHotendGet
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/hotend"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdHotendGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdHotendGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns hotend of extruder
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return Hotend
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Hotend printerHeadsHeadIdExtrudersExtruderIdHotendGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<Hotend> resp = printerHeadsHeadIdExtrudersExtruderIdHotendGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns hotend of extruder
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return ApiResponse&lt;Hotend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Hotend> printerHeadsHeadIdExtrudersExtruderIdHotendGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<Hotend>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns hotend of extruder
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendGetAsync(Long headId, Long extruderId, final ApiCallback<Hotend> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Hotend>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGet
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder to fetch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/hotend/offset"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns offset of hotend with respect to head
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder to fetch (required)
     * @return HotendOffset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HotendOffset printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<HotendOffset> resp = printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns offset of hotend with respect to head
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder to fetch (required)
     * @return ApiResponse&lt;HotendOffset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HotendOffset> printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<HotendOffset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns offset of hotend with respect to head
     * @param headId ID of head from which the extruder is fetched (required)
     * @param extruderId ID of extruder to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGetAsync(Long headId, Long extruderId, final ApiCallback<HotendOffset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendOffsetGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HotendOffset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGet
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGetCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/hotend/temperature"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGetValidateBeforeCall(Long headId, Long extruderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGet(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGetCall(headId, extruderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns temperature of extruder
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return CurrentTargetNumberPair
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CurrentTargetNumberPair printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGet(Long headId, Long extruderId) throws ApiException {
        ApiResponse<CurrentTargetNumberPair> resp = printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGetWithHttpInfo(headId, extruderId);
        return resp.getData();
    }

    /**
     * 
     * Returns temperature of extruder
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @return ApiResponse&lt;CurrentTargetNumberPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CurrentTargetNumberPair> printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGetWithHttpInfo(Long headId, Long extruderId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGetValidateBeforeCall(headId, extruderId, null, null);
        Type localVarReturnType = new TypeToken<CurrentTargetNumberPair>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns temperature of extruder
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGetAsync(Long headId, Long extruderId, final ApiCallback<CurrentTargetNumberPair> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendTemperatureGetValidateBeforeCall(headId, extruderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurrentTargetNumberPair>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePut
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param temperature Target temperature of nozzle (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePutCall(Long headId, Long extruderId, BigDecimal temperature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/{extruder_id}/hotend/temperature"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()))
            .replaceAll("\\{" + "extruder_id" + "\\}", apiClient.escapeString(extruderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (temperature != null)
        localVarFormParams.put("temperature", temperature);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePutValidateBeforeCall(Long headId, Long extruderId, BigDecimal temperature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePut(Async)");
        }
        
        // verify the required parameter 'extruderId' is set
        if (extruderId == null) {
            throw new ApiException("Missing the required parameter 'extruderId' when calling printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePut(Async)");
        }
        
        // verify the required parameter 'temperature' is set
        if (temperature == null) {
            throw new ApiException("Missing the required parameter 'temperature' when calling printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePutCall(headId, extruderId, temperature, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param temperature Target temperature of nozzle (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePut(Long headId, Long extruderId, BigDecimal temperature) throws ApiException {
        printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePutWithHttpInfo(headId, extruderId, temperature);
    }

    /**
     * 
     * 
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param temperature Target temperature of nozzle (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePutWithHttpInfo(Long headId, Long extruderId, BigDecimal temperature) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePutValidateBeforeCall(headId, extruderId, temperature, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param headId ID of head from which the hotend is fetched (required)
     * @param extruderId ID of extruder from which the hotend is fetched (required)
     * @param temperature Target temperature of nozzle (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePutAsync(Long headId, Long extruderId, BigDecimal temperature, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersExtruderIdHotendTemperaturePutValidateBeforeCall(headId, extruderId, temperature, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdExtrudersGet
     * @param headId ID of head from which the extruders are fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersGetCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/extruders/"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdExtrudersGetValidateBeforeCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdExtrudersGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersGetCall(headId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns all extruders of a head
     * @param headId ID of head from which the extruders are fetched (required)
     * @return List&lt;Extruder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Extruder> printerHeadsHeadIdExtrudersGet(Long headId) throws ApiException {
        ApiResponse<List<Extruder>> resp = printerHeadsHeadIdExtrudersGetWithHttpInfo(headId);
        return resp.getData();
    }

    /**
     * 
     * Returns all extruders of a head
     * @param headId ID of head from which the extruders are fetched (required)
     * @return ApiResponse&lt;List&lt;Extruder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Extruder>> printerHeadsHeadIdExtrudersGetWithHttpInfo(Long headId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersGetValidateBeforeCall(headId, null, null);
        Type localVarReturnType = new TypeToken<List<Extruder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all extruders of a head
     * @param headId ID of head from which the extruders are fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdExtrudersGetAsync(Long headId, final ApiCallback<List<Extruder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdExtrudersGetValidateBeforeCall(headId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Extruder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdGet
     * @param headId ID of head to fetch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdGetCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdGetValidateBeforeCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdGetCall(headId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns head by ID
     * @param headId ID of head to fetch (required)
     * @return Head
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Head printerHeadsHeadIdGet(Long headId) throws ApiException {
        ApiResponse<Head> resp = printerHeadsHeadIdGetWithHttpInfo(headId);
        return resp.getData();
    }

    /**
     * 
     * Returns head by ID
     * @param headId ID of head to fetch (required)
     * @return ApiResponse&lt;Head&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Head> printerHeadsHeadIdGetWithHttpInfo(Long headId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdGetValidateBeforeCall(headId, null, null);
        Type localVarReturnType = new TypeToken<Head>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns head by ID
     * @param headId ID of head to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdGetAsync(Long headId, final ApiCallback<Head> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdGetValidateBeforeCall(headId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Head>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdJerkGet
     * @param headId ID of head of which to get the jerk of. Note that this speed also has a Z component. This API assumes that the head is the only part that moves. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdJerkGetCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/jerk"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdJerkGetValidateBeforeCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdJerkGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdJerkGetCall(headId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns jerk of head by ID
     * @param headId ID of head of which to get the jerk of. Note that this speed also has a Z component. This API assumes that the head is the only part that moves. (required)
     * @return XYZ
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XYZ printerHeadsHeadIdJerkGet(Long headId) throws ApiException {
        ApiResponse<XYZ> resp = printerHeadsHeadIdJerkGetWithHttpInfo(headId);
        return resp.getData();
    }

    /**
     * 
     * Returns jerk of head by ID
     * @param headId ID of head of which to get the jerk of. Note that this speed also has a Z component. This API assumes that the head is the only part that moves. (required)
     * @return ApiResponse&lt;XYZ&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XYZ> printerHeadsHeadIdJerkGetWithHttpInfo(Long headId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdJerkGetValidateBeforeCall(headId, null, null);
        Type localVarReturnType = new TypeToken<XYZ>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns jerk of head by ID
     * @param headId ID of head of which to get the jerk of. Note that this speed also has a Z component. This API assumes that the head is the only part that moves. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdJerkGetAsync(Long headId, final ApiCallback<XYZ> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdJerkGetValidateBeforeCall(headId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XYZ>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdJerkPut
     * @param headId  (required)
     * @param jerk Target jerk (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdJerkPutCall(Long headId, XYZ jerk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jerk;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/jerk"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdJerkPutValidateBeforeCall(Long headId, XYZ jerk, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdJerkPut(Async)");
        }
        
        // verify the required parameter 'jerk' is set
        if (jerk == null) {
            throw new ApiException("Missing the required parameter 'jerk' when calling printerHeadsHeadIdJerkPut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdJerkPutCall(headId, jerk, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param headId  (required)
     * @param jerk Target jerk (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerHeadsHeadIdJerkPut(Long headId, XYZ jerk) throws ApiException {
        printerHeadsHeadIdJerkPutWithHttpInfo(headId, jerk);
    }

    /**
     * 
     * 
     * @param headId  (required)
     * @param jerk Target jerk (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerHeadsHeadIdJerkPutWithHttpInfo(Long headId, XYZ jerk) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdJerkPutValidateBeforeCall(headId, jerk, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param headId  (required)
     * @param jerk Target jerk (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdJerkPutAsync(Long headId, XYZ jerk, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdJerkPutValidateBeforeCall(headId, jerk, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdMaxSpeedGet
     * @param headId ID of head of which to get the max speed of. Note that this speed also has a Z component. This api assumes that the head is the only part that moves. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdMaxSpeedGetCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/max_speed"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdMaxSpeedGetValidateBeforeCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdMaxSpeedGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdMaxSpeedGetCall(headId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns max speed of head by ID
     * @param headId ID of head of which to get the max speed of. Note that this speed also has a Z component. This api assumes that the head is the only part that moves. (required)
     * @return XYZ
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XYZ printerHeadsHeadIdMaxSpeedGet(Long headId) throws ApiException {
        ApiResponse<XYZ> resp = printerHeadsHeadIdMaxSpeedGetWithHttpInfo(headId);
        return resp.getData();
    }

    /**
     * 
     * Returns max speed of head by ID
     * @param headId ID of head of which to get the max speed of. Note that this speed also has a Z component. This api assumes that the head is the only part that moves. (required)
     * @return ApiResponse&lt;XYZ&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XYZ> printerHeadsHeadIdMaxSpeedGetWithHttpInfo(Long headId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdMaxSpeedGetValidateBeforeCall(headId, null, null);
        Type localVarReturnType = new TypeToken<XYZ>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns max speed of head by ID
     * @param headId ID of head of which to get the max speed of. Note that this speed also has a Z component. This api assumes that the head is the only part that moves. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdMaxSpeedGetAsync(Long headId, final ApiCallback<XYZ> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdMaxSpeedGetValidateBeforeCall(headId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XYZ>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdMaxSpeedPut
     * @param headId  (required)
     * @param speed Target max_speed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdMaxSpeedPutCall(Long headId, XYZ speed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = speed;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/max_speed"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdMaxSpeedPutValidateBeforeCall(Long headId, XYZ speed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdMaxSpeedPut(Async)");
        }
        
        // verify the required parameter 'speed' is set
        if (speed == null) {
            throw new ApiException("Missing the required parameter 'speed' when calling printerHeadsHeadIdMaxSpeedPut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdMaxSpeedPutCall(headId, speed, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param headId  (required)
     * @param speed Target max_speed (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerHeadsHeadIdMaxSpeedPut(Long headId, XYZ speed) throws ApiException {
        printerHeadsHeadIdMaxSpeedPutWithHttpInfo(headId, speed);
    }

    /**
     * 
     * 
     * @param headId  (required)
     * @param speed Target max_speed (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerHeadsHeadIdMaxSpeedPutWithHttpInfo(Long headId, XYZ speed) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdMaxSpeedPutValidateBeforeCall(headId, speed, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param headId  (required)
     * @param speed Target max_speed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdMaxSpeedPutAsync(Long headId, XYZ speed, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdMaxSpeedPutValidateBeforeCall(headId, speed, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdPositionGet
     * @param headId ID of head of which to get position. Note that this position also has a Z component. This api assumes that the head is the only part that moves. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdPositionGetCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/position"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdPositionGetValidateBeforeCall(Long headId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdPositionGet(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdPositionGetCall(headId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns position of head by ID
     * @param headId ID of head of which to get position. Note that this position also has a Z component. This api assumes that the head is the only part that moves. (required)
     * @return XYZ
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XYZ printerHeadsHeadIdPositionGet(Long headId) throws ApiException {
        ApiResponse<XYZ> resp = printerHeadsHeadIdPositionGetWithHttpInfo(headId);
        return resp.getData();
    }

    /**
     * 
     * Returns position of head by ID
     * @param headId ID of head of which to get position. Note that this position also has a Z component. This api assumes that the head is the only part that moves. (required)
     * @return ApiResponse&lt;XYZ&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XYZ> printerHeadsHeadIdPositionGetWithHttpInfo(Long headId) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdPositionGetValidateBeforeCall(headId, null, null);
        Type localVarReturnType = new TypeToken<XYZ>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns position of head by ID
     * @param headId ID of head of which to get position. Note that this position also has a Z component. This api assumes that the head is the only part that moves. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdPositionGetAsync(Long headId, final ApiCallback<XYZ> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdPositionGetValidateBeforeCall(headId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XYZ>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerHeadsHeadIdPositionPut
     * @param headId ID of head from which the hotend is fetched (required)
     * @param position Target position (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdPositionPutCall(Long headId, XYZ position, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = position;

        // create path and map variables
        String localVarPath = "/printer/heads/{head_id}/position"
            .replaceAll("\\{" + "head_id" + "\\}", apiClient.escapeString(headId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerHeadsHeadIdPositionPutValidateBeforeCall(Long headId, XYZ position, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'headId' is set
        if (headId == null) {
            throw new ApiException("Missing the required parameter 'headId' when calling printerHeadsHeadIdPositionPut(Async)");
        }
        
        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling printerHeadsHeadIdPositionPut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerHeadsHeadIdPositionPutCall(headId, position, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param headId ID of head from which the hotend is fetched (required)
     * @param position Target position (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerHeadsHeadIdPositionPut(Long headId, XYZ position) throws ApiException {
        printerHeadsHeadIdPositionPutWithHttpInfo(headId, position);
    }

    /**
     * 
     * 
     * @param headId ID of head from which the hotend is fetched (required)
     * @param position Target position (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerHeadsHeadIdPositionPutWithHttpInfo(Long headId, XYZ position) throws ApiException {
        com.squareup.okhttp.Call call = printerHeadsHeadIdPositionPutValidateBeforeCall(headId, position, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param headId ID of head from which the hotend is fetched (required)
     * @param position Target position (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerHeadsHeadIdPositionPutAsync(Long headId, XYZ position, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerHeadsHeadIdPositionPutValidateBeforeCall(headId, position, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerLedBlinkPost
     * @param blink  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerLedBlinkPostCall(Blink blink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = blink;

        // create path and map variables
        String localVarPath = "/printer/led/blink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerLedBlinkPostValidateBeforeCall(Blink blink, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerLedBlinkPostCall(blink, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param blink  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerLedBlinkPost(Blink blink) throws ApiException {
        printerLedBlinkPostWithHttpInfo(blink);
    }

    /**
     * 
     * 
     * @param blink  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerLedBlinkPostWithHttpInfo(Blink blink) throws ApiException {
        com.squareup.okhttp.Call call = printerLedBlinkPostValidateBeforeCall(blink, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param blink  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerLedBlinkPostAsync(Blink blink, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerLedBlinkPostValidateBeforeCall(blink, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerLedGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerLedGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/led";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerLedGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerLedGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns hue, saturation, and value (HSV) of the case lighting
     * @return Led
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Led printerLedGet() throws ApiException {
        ApiResponse<Led> resp = printerLedGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns hue, saturation, and value (HSV) of the case lighting
     * @return ApiResponse&lt;Led&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Led> printerLedGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = printerLedGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Led>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns hue, saturation, and value (HSV) of the case lighting
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerLedGetAsync(final ApiCallback<Led> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerLedGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Led>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerLedPut
     * @param color Target hue of case lighting (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerLedPutCall(Led color, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = color;

        // create path and map variables
        String localVarPath = "/printer/led";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerLedPutValidateBeforeCall(Led color, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling printerLedPut(Async)");
        }
        

        com.squareup.okhttp.Call call = printerLedPutCall(color, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param color Target hue of case lighting (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void printerLedPut(Led color) throws ApiException {
        printerLedPutWithHttpInfo(color);
    }

    /**
     * 
     * 
     * @param color Target hue of case lighting (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> printerLedPutWithHttpInfo(Led color) throws ApiException {
        com.squareup.okhttp.Call call = printerLedPutValidateBeforeCall(color, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param color Target hue of case lighting (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerLedPutAsync(Led color, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerLedPutValidateBeforeCall(color, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for printerStatusGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerStatusGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerStatusGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = printerStatusGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the status of the printer
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String printerStatusGet() throws ApiException {
        ApiResponse<String> resp = printerStatusGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get the status of the printer
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> printerStatusGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = printerStatusGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the status of the printer
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerStatusGetAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerStatusGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for printerValidateHeaderPost
     * @param file File that needs to be printed (.gcode, .gcode.gz) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call printerValidateHeaderPostCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/printer/validate_header";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call printerValidateHeaderPostValidateBeforeCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling printerValidateHeaderPost(Async)");
        }
        

        com.squareup.okhttp.Call call = printerValidateHeaderPostCall(file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param file File that needs to be printed (.gcode, .gcode.gz) (required)
     * @return List&lt;HeaderValidationEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<HeaderValidationEntry> printerValidateHeaderPost(File file) throws ApiException {
        ApiResponse<List<HeaderValidationEntry>> resp = printerValidateHeaderPostWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param file File that needs to be printed (.gcode, .gcode.gz) (required)
     * @return ApiResponse&lt;List&lt;HeaderValidationEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<HeaderValidationEntry>> printerValidateHeaderPostWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = printerValidateHeaderPostValidateBeforeCall(file, null, null);
        Type localVarReturnType = new TypeToken<List<HeaderValidationEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param file File that needs to be printed (.gcode, .gcode.gz) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call printerValidateHeaderPostAsync(File file, final ApiCallback<List<HeaderValidationEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = printerValidateHeaderPostValidateBeforeCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<HeaderValidationEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
