# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "20s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "1s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "15s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "5s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = "2s"

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log file name, the empty string means to log to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  # urls = ["unix:///var/run/influxdb.sock"]
  # urls = ["udp://127.0.0.1:8089"]
  urls = ["http://influxdb:8086"]

  ## The target database for metrics; will be created as needed.
  database = "ultimaker"

  ## If true, no CREATE DATABASE queries will be sent.  Set to true when using
  ## Telegraf with a user without permissions to create databases or when the
  ## database already exists.
  # skip_database_creation = false

  ## Name of existing retention policy to write to.  Empty string writes to
  ## the default retention policy.  Only takes effect when using HTTP.
  # retention_policy = ""

  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all".
  ## Only takes effect when using HTTP.
  # write_consistency = "any"

  ## Timeout for HTTP messages.
  # timeout = "5s"

  ## HTTP Basic Auth
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  ## HTTP User-Agent
  # user_agent = "telegraf"

  ## UDP payload size is the maximum packet size to send.
  # udp_payload = "512B"

  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "identity"

  ## When true, Telegraf will output unsigned integers as unsigned values,
  ## i.e.: "42u".  You will need a version of InfluxDB supporting unsigned
  ## integer values.  Enabling this option will result in field type errors if
  ## existing data has been written.
  # influx_uint_support = false

# # Configuration for sending metrics to InfluxDB
# [[outputs.influxdb_v2]]
#   ## The URLs of the InfluxDB cluster nodes.
#   ##
#   ## Multiple URLs can be specified for a single cluster, only ONE of the
#   ## urls will be written to each interval.
#   urls = ["http://127.0.0.1:9999"]
#
#   ## Token for authentication.
#   token = ""
#
#   ## Organization is the name of the organization you wish to write to; must exist.
#   organization = ""
#
#   ## Destination bucket to write into.
#   bucket = ""
#
#   ## The value of this tag will be used to determine the bucket.  If this
#   ## tag is not set the 'bucket' option is used as the default.
#   # bucket_tag = ""
#
#   ## If true, the bucket tag will not be added to the metric.
#   # exclude_bucket_tag = false
#
#   ## Timeout for HTTP messages.
#   # timeout = "5s"
#
#   ## Additional HTTP headers
#   # http_headers = {"X-Special-Header" = "Special-Value"}
#
#   ## HTTP Proxy override, if unset values the standard proxy environment
#   ## variables are consulted to determine which proxy, if any, should be used.
#   # http_proxy = "http://corporate.proxy:3128"
#
#   ## HTTP User-Agent
#   # user_agent = "telegraf"
#
#   ## Content-Encoding for write request body, can be set to "gzip" to
#   ## compress body or "identity" to apply no encoding.
#   # content_encoding = "gzip"
#
#   ## Enable or disable uint support for writing uints influxdb 2.0.
#   # influx_uint_support = false
#
#   ## Optional TLS Config for use on HTTP connections.
#   # tls_ca = "/etc/telegraf/ca.pem"
#   # tls_cert = "/etc/telegraf/cert.pem"
#   # tls_key = "/etc/telegraf/key.pem"
#   ## Use TLS but skip chain & host verification
#   # insecure_skip_verify = false

###############################################################################
#                                  INPUTS                                     #
###############################################################################

# STATUS INPUT
[[inputs.http]]
  ## One or more URLs from which to read formatted metrics
  urls = [
    "http://api:8080/api/10.6.0.31/status"
  ]

  ## HTTP method
  method = "GET"

  ## Amount of time allowed to complete the HTTP request
  timeout = "20s"

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "influx"
  
[[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.32/status"
  ]
  method = "GET"
  timeout = "20s"
  data_format = "influx"
  
[[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.33/status"
  ]
  method = "GET"
  timeout = "20s"
  data_format = "influx"
  
# HOTEND TEMPERATURES INPUT
[[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.31/hotend-temperatures"
  ]
  method = "GET"
  timeout = "20s" 
  interval = "60s"
  data_format = "influx"
  
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.32/hotend-temperatures"
  ]
  method = "GET"
  timeout = "20s" 
  interval = "65s"
  data_format = "influx"
  
    [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.33/hotend-temperatures"
  ]
  method = "GET"
  timeout = "20s" 
  interval = "70s"
  data_format = "influx"
  
# HOT TIME INPUT
[[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.31/hot-time"
  ]
  method = "GET"
  timeout = "20s"
  interval = "75s"
  data_format = "influx"
  
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.32/hot-time"
  ]
  method = "GET"
  timeout = "20s"
  interval = "80s"
  data_format = "influx"
  
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.33/hot-time"
  ]
  method = "GET"
  timeout = "20s"
  interval = "85s"
  data_format = "influx"
  
# MATERIAL EXTRUDED INPUT
[[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.31/material-extruded"
  ]
  method = "GET"
  timeout = "20s"
  interval = "90s"
  data_format = "influx"
  
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.32/material-extruded"
  ]
  method = "GET"
  timeout = "20s"
  interval = "95s"
  data_format = "influx"
  
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.33/material-extruded"
  ]
  method = "GET"
  timeout = "20s"
  interval = "100s"
  data_format = "influx"
      
# MATERIAL REMAINING INPUT
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.31/material-remaining"
  ]
  method = "GET"
  timeout = "20s"
  interval = "105s"
  data_format = "influx"
  
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.32/material-remaining"
  ]
  method = "GET"
  timeout = "20s"
  interval = "110s"
  data_format = "influx"
  
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.33/material-remaining"
  ]
  method = "GET"
  timeout = "20s"
  interval = "115s"
  data_format = "influx"
   
# PRINTJOB HISTORY INPUT
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.31/printjob-history"
  ]
  method = "GET"
  timeout = "20s"
  interval = "120s"
  data_format = "influx"
  
    [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.32/printjob-history"
  ]
  method = "GET"
  timeout = "20s"
  interval = "125s"
  data_format = "influx"
  
    [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.33/printjob-history"
  ]
  method = "GET"
  timeout = "20s"
  interval = "130s"
  data_format = "influx"
  
  # PRINTJOB PROGRESS INPUT 
    [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.31/printjob-progress"
  ]
  timeout = "20s"
  interval = "135s"
  data_format = "influx"
  
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.32/printjob-progress"
  ]
  method = "GET"
  timeout = "20s"
  interval = "140s"
  data_format = "influx"
  
  [[inputs.http]]
  urls = [
    "http://api:8080/api/10.6.0.33/printjob-progress"
  ]
  method = "GET"
  timeout = "20s"
  interval = "145s"
  data_format = "influx"
  